// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  password    String
  email       String   @unique
  name        String
  description String?
  birthDate   DateTime
  address     String

  favoritesPrivate Boolean @default(false)

  refreshToken       String? @db.VarChar(1024)
  resetPasswordToken String? @db.VarChar(1024)

  favorites     FavoritePhotos[]
  gallery       PhotoGallery[]
  photos        Photo[]
  photoRankings PhotoRanking[]
  comments      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model PhotoGallery {
  id String @id @default(uuid())

  photos Photo[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photos_gallery")
}

model FavoritePhotos {
  id String @id @default(uuid())

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("favorite_photos")
}

model Photo {
  id String @id @default(uuid())

  filename    String
  title       String
  description String
  url         String

  cloudinaryPublicId String

  rankings PhotoRanking[]

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User?            @relation(fields: [userId], references: [id])
  userId         String?
  favoritePhotos FavoritePhotos[]
  photoGallery   PhotoGallery?    @relation(fields: [photoGalleryId], references: [id])
  photoGalleryId String?

  @@map("photos")
}

model Comment {
  id String @id @default(uuid())

  comment String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo?   @relation(fields: [photoId], references: [id])
  photoId   String?
  userId    String

  @@map("comments")
}

model PhotoRanking {
  id    String @id @default(uuid())
  // comment   String?
  // 1 a 5
  value Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo     Photo?   @relation(fields: [photoId], references: [id])
  photoId   String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("photos_rankings")
}
